3주차
가변길이란 인수 또는 반환값의 수가 달라질 수 있다는 뜻이다. 
가변 길이 입출력 표현은 하나의 인수 만 받고 하나의 값만 반환 시키는 것이다. 
인수와 반환값의 타입을 리스트로 바꾸고 그 후 필요한 변수들을 리스트에 넣는다. 
인수와 반환값을 리스트로 변경하는 방법은 
1. __call__메서드를 불른 후 
Variable 에서 실제 데이터를 꺼낸다. 
2.forward 메서드에서 구체적인 계산을 수행을한 후 
반환값을 Variable을 넣는다 . 
리스트나 튜플을 거치지 않고 인수와 결과를 직접 주고 받도록 한다. 
소스를 수정할 때는 함수를 정의 할 때 인수 앞에 *을 붙인다. 
Funtion 클래스 를 수정할 때는 리스트 언팩을 사용한다.
단 forward 반환값이 튜플이 아닐 경우 튜플로 변경하여 진행한다.
가변 길이 인수에 대응한 Add클래스의 역전파에서는 
1. 덧셈 계산 그래프 가 있다.
그중 순전파는 입력이 두개 출력이 한개이며 역전파는 입력이 1개 출력이 두개이다.
다변수 함수는 입력 변수가 여러 개인 함수이며, 
편미분이 있다. 
편미분은 다변수 함수에서 하나의 입력 변수만 주목 후 다른 변수는 상수로 취급 후 미분된다. 
여러가지의 변수를 해결하기 위해 수정을 진행될려면 다음과 같은 방식을 진행할 수 있다. 
1. Outputs에 담겨 있는 미분값들을 리스트에 포함하고 
2. 함수 f의 역전퍼를 호출하거나 인수는 리스트 언팩을 사용한다. 
3. backward 반환값이 튜플이 아니면 튜플로 변환한다
4. 역전파로 전파되는 미분값을 Variable의 인스턴스 변수 grad에 저장한다.
같은 변수를 반복 사용시  
backward에서 출력전해지는 미분값을 그대로 대입하고 같은 변수 반복하여 사용시 전파되는 미분값이 덮어 씌어지는 문제점이 있다. 
그래서 미분값을 처음 설정하는 경우 출력에서 전해지는 미분값을 그대로 대입하고 처음 이후 부터는 전달된 미분값을 더해주도록 수정한다. 
역전파 시 미분값을 더해주는 코드의 문제점은
같은 변수를 사용하여 다른 계산을 할 경우 계산이 꼬이는 문제가 발생한다.
그 원인은 다른값의 미분 계산을 했지만 메모리를 절약하기에 Variable 인스턴스를 재 사용하여 첫 번째 미분값과 두번째 미분값이 더해진다.
이것에 대한 해결책은 .Variable클래스에 미분값을 초기화하는 cleargrad 메서드를 추가한다. 
복잡하게 연결된 계산 그래프의 미분계산을 하는 것의 순서는 
변수를 반복해서 사용하면 역전파 때는 출력 쪽에서 전파하는 미분값을 더해야 한다.
복잡한 그래프의 미분 계산시 현 DeZero의 문제점은 
역전파가 두번 일어나거나 순서 처리에서 D,C,B,A순의 이지만 C에서 바로 A로 이어지는 경우가 있다.

backward
4주차
실제로DeZero의 성능이 중요하다 = 많은 양의 계산을 위해 =성능 개선
사용자의 편의성을 위해 메모리 속도를 개선과 같은 형식을 유저 인터페이스 후 패키지화 하기 위함.
파이썬 메모리의 원리는 필요 없는 객체에 대해 참조가 없기에 자동 삭제 된다.    
out of memory 같은 메모리 부족 문제를 해결하기 위함.
메모리에는 파라미터가 크기에 시간이 많이 걸림.
파이선의 메모리 레퍼런스를 사용하여 객체의 클래스 인스턴스를 만들어서 사용하기에 장시간 동안 참조를 사용하지 않은 경우 
파이썬은 메모리를 제거
가비지 컬랙션 세대별로 쓸모 없는 객체를 삭제하는 방식 총 두가지 있음.
참조 - 카운터  참조 카운트가 0이 되면 회수가 진행됨.
참조가 계속적으로 기입시 참조카운트가증가 
      장시간 사용하지않을시 감소
순환 참조 - 서로 연쇄적으로 참조 되고 있음. 
서로를 참조하기 때문에 삭제되지 않음. 
그래서 가비지 컬렉션을 사용하여, 메모리가 부족해지는 시점에서  파이썬 인터프리터에서 자동 호출되어 해제된다. 
허나 가비지 컬렉션을 사용 시 메모리량이 증가 됨. 
메모리가 증가하면 수행 속도가 느리기 때문에 DeZero를 사용 시 순환 참조로 제작하는 것은 좋지 않다. 
위의 상황을 보안하기 위해 약한 참조가 제작되었고.
객채를 참조하지만 카운트는 증가 되지 않는 기능이다. 
메모리를 절약하는방법 
1. 역전파 사용시에 불필요한 중간 계산메모리를 즉시 삭제하는 방법.
2. 모드를 사용하여 삭제하는 방법- 아예 역전파를 사용하지 않는 방법.
   retain_grad를 사용하여 중간값을 삭제한다.
  with문을 사용하여, 안에서 역전파 비활성화 및 이 블록을 벗어나면 일반화라고 한다.
역전파가 필요없는경우 편의를 위해 no_grad를 사용한다.
Variable 인스턴스에서 할 수 있도록 shape 함수를 사용하여 확장 시킬 수 있다.
   repr 메소를드를 사용하여 객체의 상태를재현하는데 유용한 문자로 반환시켜 준다.
C++의연산자 오버로드와 상당히 유사한 연산자를 Variable에 확장시키는 것이다.
y = a*b 처럼 코딩할 수 있도록 제작.
mul 클래스는 *
class Variable:
....
 Variable.mul_ = mul
 Variable.add_ = add
가 전제로 있어야 한다. 
__mul__(self,other) 여기서 self는 a값 other 는 b값이다.
아이디어란 nd.array 인스턴스를 자동으로 Variable으로 변환하는 것이다.
 mul과 rmul은 틀리다.
사칙연산의 연산자 우선순위를 인스턴스들에대입을 시켜 우선순위 지정.
Function클래스를 사용하여, 연산자들을 새로 추가한다.
음수를 대입하기 위해 forward와 backward를 항상 대입해야한다.
그리고 neg함수를 사용.
뺄셈은 rsub을정의후 인수의 순서를 바꿔  sub를 호출
나눗셈은 backward에 미분을 진행한다.
거듭제곱급도 같다.
